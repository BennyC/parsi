{"name":"Parsi","tagline":"Easily edit and read your CSV's. Query them too!","body":"# _Fudge\\Parsi_\r\n\r\n_Easily edit and read your CSV's. Query them too!_\r\n\r\n## Project Setup\r\nIn terminal/commandline:\r\n\r\n    composer require fudge/parsi [dev-master]\r\n\r\nOr you can add this to your `composer.json`:\r\n\r\n    \"require\": {\r\n        \"fudge/parsi\": \"dev-master\"\r\n    }\r\n\r\n\r\n## Unit Tests\r\n\r\nI am proud to say that Fudge\\Parsi is *100%* covered by unit tests.\r\nPHPUnit version used is _~2.7.33_.\r\n\r\n1. `./vendor/bin/phpunit`\r\n\r\nIf you wish to make modifications to the `phpunit.xml.dist`, please create your own\r\n`phpunit.xml` to override what is currently being used in the dist file.\r\n\r\n## Examples\r\n\r\n### Reading CSVs\r\n\r\n```php\r\n<?php\r\nrequire_once './vendor/autoload.php';\r\n\r\n$file  = new SplFileObject('path/to/csv.csv');\r\n$csv   = new \\Parsi\\Readers\\Csv($file);\r\n\r\n// Headers may be included.\r\n// $csv->headers(true)->load();\r\n// OR\r\n// $csv = new \\Parsi\\Readers\\Csv($file, $headers = true);\r\n\r\n$array = $csv->data(); // Returns an array of the data found within the file\r\n```\r\n### Writing CSVs\r\n\r\n```php\r\n<?php\r\nrequire_once './vendor/autoload.php';\r\n\r\n$data = array(\r\n    array(1, 'Ben', 'Hello, World!'),\r\n    array(2, 'Kev', 'Shiny Shoes!'),\r\n);\r\n\r\n$file = new SplFileObject('path/to/creation.csv', 'w+'); // Please ensure you use 'w+'\r\n$csv  = new \\Parsi\\Writers\\Csv($file);\r\n\r\n// Data may be set during construction like so;\r\n// new \\Parsi\\Writers\\Csv($file, $data);\r\n\r\n$csv->setData($data)->create(); // File will now be created.\r\n```\r\n\r\n### Querying CSVs\r\n```php\r\n<?php\r\nrequire_once './vendor/autoload.php';\r\n\r\n$file  = new SplFileObject('path/to/csv.csv');\r\n$csv   = new \\Parsi\\Readers\\Csv($file);\r\n$query = \\Parsi\\Query::query($csv)->select(array('1', '2'))->where(1, '=', 2); // Similar syntax to Laravel Fluent/Eloquent.\r\n\r\n/**\r\n * $data will now be populated with a multi-dimensional array with keys 1, 2\r\n * which match the where clause\r\n */\r\n$data = $query->get();\r\n```\r\n\r\n## Documentation\r\n\r\n_To Come..._\r\n\r\n## Contributing changes\r\n\r\nPlease feel free to open pull requests for new features/bugs.\r\n\r\nIf you find bugs but do not have the time to fix them yourself, please open an issue.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}